
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { content, inputType } = await req.json()
    const apiKey = Deno.env.get('GEMINI_API_KEY')

    console.log('Gemini rewrite request:', { inputType, contentLength: content?.length });

    if (!apiKey) {
      console.error('Gemini API key not configured');
      return new Response(
        JSON.stringify({ error: 'Gemini API key not configured' }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 500 
        }
      )
    }

    if (!content || !content.trim()) {
      console.error('No content provided');
      return new Response(
        JSON.stringify({ error: 'Content is required' }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 400 
        }
      )
    }

    let prompt = ''
    if (inputType === 'url') {
      prompt = `Please rewrite and enhance the content from this URL into a comprehensive blog post. Make it engaging, well-structured, and SEO-friendly. URL: ${content}`
    } else {
      prompt = `Please rewrite and enhance this text into a comprehensive, engaging blog post. Make it well-structured, professional, and SEO-friendly. Original text: ${content}`
    }

    console.log('Making request to Gemini API...');

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        }
      })
    })

    console.log('Gemini API response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', response.status, errorText);
      throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json()
    console.log('Gemini API response received');

    const rewrittenContent = data.candidates?.[0]?.content?.parts?.[0]?.text

    if (!rewrittenContent) {
      console.error('No content generated by Gemini API', data);
      throw new Error('No content generated by Gemini API')
    }

    // Generate a title from the content
    const lines = rewrittenContent.split('\n').filter(line => line.trim())
    const title = lines[0]?.replace(/^#+\s*/, '') || 'AI Generated Article'

    console.log('Successfully generated content with title:', title);

    return new Response(
      JSON.stringify({
        success: true,
        title,
        content: rewrittenContent
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('Gemini rewrite error:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Failed to rewrite content with AI', 
        details: error.message 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    )
  }
})
